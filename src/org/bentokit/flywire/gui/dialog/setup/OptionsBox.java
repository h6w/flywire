/*
    This file is part of Flywire.

    Flywire is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Flywire is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Flywire.  If not, see <http://www.gnu.org/licenses/>.
*/
package org.bentokit.flywire.gui.dialog.setup;

import org.bentokit.flywire.Flywire;
import org.bentokit.flywire.Flywire.PlayMode;
import org.bentokit.flywire.config.Config;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * OptionsBox.java
 *
 * Created on 11/12/2009, 10:44:19 AM
 */

/**
 *
 * @author cbpaine
 */
public class OptionsBox extends javax.swing.JFrame {

    /**
	 * 
	 */
	private static final long serialVersionUID = -8718457825139797932L;
	
	/** Creates new form OptionsBox */
    public OptionsBox() {
        initComponents();
    }

    @Override
    public void setVisible(boolean visible)
    {
        if (visible && !isVisible())
        {
            // Load the current config here
            Config cfg = Config.getConfig();
            cbAlwaysShowHours.setSelected(cfg.alwaysShowHours());
            cbExposeListMode.setSelected(true); // FIXME
            cbExposeListMode.setEnabled(false); // FIXME
            cbWindowMaximised.setSelected(cfg.isWindowMaximised());
            cbIgnoreControlFiles.setSelected(cfg.ignoreControlFiles());
            if (cfg.isStartPlayModeForced())
            {
                switch (cfg.getStartPlayMode())
                {
                    case SHOW:
                        rbShowMode.setSelected(true); break;
                    case LIST:
                        rbListMode.setSelected(true); break;
                    case AUTODJ:
                        rbAutoMode.setSelected(true); break;
                }
            }
            else
            {
                rbLastMode.setSelected(true);
            }
            setLocation(cfg.getOptionsBoxPos());
        }
        super.setVisible(visible);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bgStartPlayMode = new javax.swing.ButtonGroup();
        btnOK = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        tabs = new javax.swing.JTabbedPane();
        optionsPanelPrefs = new javax.swing.JPanel();
        cbAlwaysShowHours = new javax.swing.JCheckBox();
        cbExposeListMode = new javax.swing.JCheckBox();
        cbWindowMaximised = new javax.swing.JCheckBox();
        cbIgnoreControlFiles = new javax.swing.JCheckBox();
        playModePanel = new javax.swing.JPanel();
        rbAutoMode = new javax.swing.JRadioButton();
        rbShowMode = new javax.swing.JRadioButton();
        rbLastMode = new javax.swing.JRadioButton();
        rbListMode = new javax.swing.JRadioButton();
        optionsPanelLogging = new javax.swing.JPanel();

        setTitle("Flywire options");
        setAlwaysOnTop(true);

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        cbAlwaysShowHours.setText("Always show hours");

        cbExposeListMode.setText("Enable list mode");

        cbWindowMaximised.setText("Maximise main window");

        cbIgnoreControlFiles.setText("Ignore control files");

        playModePanel.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Startup play mode", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(0, 0, 0))); // NOI18N

        bgStartPlayMode.add(rbAutoMode);
        rbAutoMode.setText("Auto DJ");

        bgStartPlayMode.add(rbShowMode);
        rbShowMode.setText("Show");

        bgStartPlayMode.add(rbLastMode);
        rbLastMode.setText("Last");

        bgStartPlayMode.add(rbListMode);
        rbListMode.setText("List");

        javax.swing.GroupLayout playModePanelLayout = new javax.swing.GroupLayout(playModePanel);
        playModePanel.setLayout(playModePanelLayout);
        playModePanelLayout.setHorizontalGroup(
            playModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playModePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbAutoMode)
                    .addComponent(rbListMode)
                    .addComponent(rbShowMode)
                    .addComponent(rbLastMode))
                .addContainerGap(35, Short.MAX_VALUE))
        );
        playModePanelLayout.setVerticalGroup(
            playModePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playModePanelLayout.createSequentialGroup()
                .addComponent(rbShowMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbListMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbAutoMode)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(rbLastMode)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout optionsPanelPrefsLayout = new javax.swing.GroupLayout(optionsPanelPrefs);
        optionsPanelPrefs.setLayout(optionsPanelPrefsLayout);
        optionsPanelPrefsLayout.setHorizontalGroup(
            optionsPanelPrefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelPrefsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelPrefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cbIgnoreControlFiles)
                    .addComponent(cbAlwaysShowHours)
                    .addComponent(cbExposeListMode)
                    .addComponent(cbWindowMaximised))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(playModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        optionsPanelPrefsLayout.setVerticalGroup(
            optionsPanelPrefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(optionsPanelPrefsLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(optionsPanelPrefsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playModePanel, javax.swing.GroupLayout.PREFERRED_SIZE, 135, Short.MAX_VALUE)
                    .addGroup(optionsPanelPrefsLayout.createSequentialGroup()
                        .addComponent(cbAlwaysShowHours)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbExposeListMode)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbWindowMaximised)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(cbIgnoreControlFiles)))
                .addContainerGap())
        );

        tabs.addTab("Preferences", optionsPanelPrefs);

        javax.swing.GroupLayout optionsPanelLoggingLayout = new javax.swing.GroupLayout(optionsPanelLogging);
        optionsPanelLogging.setLayout(optionsPanelLoggingLayout);
        optionsPanelLoggingLayout.setHorizontalGroup(
            optionsPanelLoggingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 302, Short.MAX_VALUE)
        );
        optionsPanelLoggingLayout.setVerticalGroup(
            optionsPanelLoggingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 157, Short.MAX_VALUE)
        );

        tabs.addTab("Logging", optionsPanelLogging);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(159, Short.MAX_VALUE)
                .addComponent(btnOK)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnCancel)
                .addGap(12, 12, 12))
            .addComponent(tabs, javax.swing.GroupLayout.DEFAULT_SIZE, 307, Short.MAX_VALUE)
        );

        layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCancel, btnOK});

        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(tabs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnCancelActionPerformed
    {//GEN-HEADEREND:event_btnCancelActionPerformed
        setVisible(false);
        Config.getConfig().setOptionsBoxPos(getLocation());
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_btnOKActionPerformed
    {//GEN-HEADEREND:event_btnOKActionPerformed
        setVisible(false);
        Config cfg = Config.getConfig();
        cfg.alwaysShowHours(cbAlwaysShowHours.isSelected());
        cfg.ignoreControlFiles(cbIgnoreControlFiles.isSelected());
        cfg.setWindowMaximised(cbWindowMaximised.isSelected());
        cfg.setOptionsBoxPos(getLocation());
        // FIXME: do something about ExposeListMode
        cfg.forceStartPlayMode(!rbLastMode.isSelected());
        cfg.setForcedPlayMode(rbShowMode.isSelected() ? Flywire.PlayMode.SHOW : rbListMode.isSelected() ? Flywire.PlayMode.LIST : Flywire.PlayMode.AUTODJ);
    }//GEN-LAST:event_btnOKActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup bgStartPlayMode;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JCheckBox cbAlwaysShowHours;
    private javax.swing.JCheckBox cbExposeListMode;
    private javax.swing.JCheckBox cbIgnoreControlFiles;
    private javax.swing.JCheckBox cbWindowMaximised;
    private javax.swing.JPanel optionsPanelLogging;
    private javax.swing.JPanel optionsPanelPrefs;
    private javax.swing.JPanel playModePanel;
    private javax.swing.JRadioButton rbAutoMode;
    private javax.swing.JRadioButton rbLastMode;
    private javax.swing.JRadioButton rbListMode;
    private javax.swing.JRadioButton rbShowMode;
    private javax.swing.JTabbedPane tabs;
    // End of variables declaration//GEN-END:variables

}
